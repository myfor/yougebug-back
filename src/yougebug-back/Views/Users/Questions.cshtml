@model yougebug_back.ViewModels.Users.UserQuestions

@section Style {
    <style>
        .user {
            height: 70px;
            display: flex;
            align-items: flex-end;
            border-bottom: 1px solid #c1c1c1;
        }

        .avatar {
            position: relative;
            top: 15px;
            left: 15px;
            background-color: #fff;
        }
    </style>
}

<div class="row">
    <div class="col-2 d-none d-lg-block" style="width: 150px;">
        @await Html.PartialAsync("_LeftNav")
    </div>

    <div class="col-sm-12 col-lg-8 h-100">
        <div>
            @await Html.PartialAsync("_UserIntro", Model.UserIntro)
        </div>

        <div class="mt-5">
            <span class="h4 tag-top">
                提问列表
            </span>

            <div>
                @foreach (var question in Model.Paginator.GetList<Domain.Questions.Results.QuestionItem_UserSelf>())
                {
                    <div class="d-flex flex-column border rounded mt-2 mb-2 p-3">
                        <span>
                            <a href="questions/@question.Id/@question.Title">@question.Title</a>
                        </span>
                        <div class="p-2">
                            @question.Description
                        </div>
                        <div>
                            <span class="small">@question.CreateDate</span>
                            @if (question.IsSelf)
                            {
                                @switch (question.State.Key)
                                {
                                    case (int)Domain.Questions.Question.QuestionState.Enabled:
                                        <span class="ml-3 badge badge-primary">@question.State.Value</span>; break;
                                    case (int)Domain.Questions.Question.QuestionState.Back:
                                        <span class="ml-3 badge badge-danger">@question.State.Value</span>; break;
                                    case (int)Domain.Questions.Question.QuestionState.ToAudit:
                                        <span class="ml-3 badge badge-warning">@question.State.Value</span>; break;
                                    case (int)Domain.Questions.Question.QuestionState.Delete:
                                        <button class="btn btn-danger btn-sm" id="btn_deleteQuestion" onclick="deleteQuestion(@question.Id)">删除</button>; break;
                                    default:
                                        <span class="ml-3 badge">@question.State.Value</span>
                                        break;
                                }
                            }
                        </div>
                    </div>
                }

                @await Html.PartialAsync("_Paginator", Model.Paginator)
            </div>

        </div>
    </div>

    <div class="col-2 d-none d-lg-block">
        @await Html.PartialAsync("_RightNav")
    </div>
</div>

@section Scripts {
}