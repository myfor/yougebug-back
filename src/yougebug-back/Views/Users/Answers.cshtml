@model yougebug_back.ViewModels.Users.UserAnswers

@section Style {
    <style>
        .user {
            height: 70px;
            display: flex;
            align-items: flex-end;
            border-bottom: 1px solid #c1c1c1;
        }

        .avatar {
            position: relative;
            top: 15px;
            left: 15px;
            background-color: #fff;
        }
    </style>
}

<div class="row">
    <div class="col-2 d-none d-lg-block" style="width: 150px;">
        @await Html.PartialAsync("_LeftNav")
    </div>

    <div class="col-sm-12 col-lg-8 h-100">
        <div>
            @await Html.PartialAsync("_UserIntro", Model.UserIntro)
        </div>

        <div class="mt-5">
            <span class="h4 tag-top">
                提问列表
            </span>

            <div>
                @foreach (var answer in Model.Paginator.GetList<Domain.Answers.Results.AnswerItem_UserPage>())
                {
                    <div class="d-flex flex-column border rounded mt-2 mb-2 p-3" id="d-answer-box-@answer.Id">
                        <span>
                            <a href="questions/@answer.Id/@answer.QuestionTitle">@answer.QuestionTitle</a>
                        </span>
                        <div class="p-2">
                            <a href="answers/@answer.Id">@answer.AnswerContent</a>
                        </div>
                        <div class="d-flex">
                            <div class="flex-grow-1">
                                <span class="small">@answer.CreateDate</span>
                                @if (answer.IsSelf)
                                {
                                    @switch (answer.State.Key)
                                    {
                                        case (int)Domain.Answers.Answer.AnswerState.Enabled:
                                            <span class="ml-3 badge badge-success">@answer.State.Value</span>; break;
                                        case (int)Domain.Answers.Answer.AnswerState.Disabled:
                                            <span class="ml-3 badge badge-danger">@answer.State.Value</span>; break;
                                        case (int)Domain.Answers.Answer.AnswerState.ToAudit:
                                            <span class="ml-3 badge badge-warning">@answer.State.Value</span>; break;
                                        default:
                                            <span class="ml-3 badge">@answer.State.Value</span>
                                            break;
                                    }
                                }
                            </div>
                            <span>
                                <button class="btn btn-danger btn-sm" id="btn_deleteAnswer" onclick="deleteAnswer(@answer.Id)">删除</button>
                            </span>
                        </div>
                    </div>
                }

                @await Html.PartialAsync("_Paginator", Model.Paginator)
            </div>

        </div>
    </div>

    <div class="col-2 d-none d-lg-block">
        @await Html.PartialAsync("_RightNav")
    </div>
</div>

@section Scripts {
    <script>
        function deleteAnswer(answerId) {
            disabled('btn_deleteAnswer', '删除中', 'button');
            axios.delete(`/answers/${answerId}`)
                .then(function (resp) {
                    if (resp.status === 200) {
                        const THIS_ANSWER_BOX = document.getElementById('d-answer-box-' + answerId)
                        const _parent = THIS_ANSWER_BOX.parentNode;
                        _parent.removeChild(THIS_ANSWER_BOX);
                    } else {
                        showAlert(resp.data.message);
                        enabled('btn_deleteAnswer', '删除', 'button');
                    }
                })
                .catch(function (err) {
                    catchErr(err);
                    enabled('btn_deleteAnswer', '删除', 'button');
                })
        }
    </script>
}